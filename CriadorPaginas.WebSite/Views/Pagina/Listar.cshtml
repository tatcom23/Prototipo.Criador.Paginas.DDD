@model List<Paginas.Application.DTOs.PaginaDTO>
@{ ViewData["Title"] = "Lista de Páginas";

    int page = ViewBag.Page ?? 1;
    int pageSize = ViewBag.PageSize ?? 10;
    int totalCount = ViewBag.TotalCount ?? (Model?.Count ?? 0);
    int totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);

    string BuildPageUrl(int p) => Url.Action("Listar", "Pagina", new { page = p, pageSize = pageSize })!; }

@functions{ private static string StripHtml(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return string.Empty;
        return System.Net.WebUtility.HtmlDecode(System.Text.RegularExpressions.Regex.Replace(input, "<.*?>", string.Empty));
    }

    private static string Truncate(string input, int max = 220)
    {
        if (string.IsNullOrEmpty(input)) return string.Empty;
        var s = input.Trim();
        return s.Length <= max ? s : s.Substring(0, max).TrimEnd() + "…";
    }

    private static string Snippet(string html, int max = 220)
    {
        return Truncate(StripHtml(html), max);
    } }
<div class="d-flex justify-content-end align-items-center mb-3">
    <a asp-action="Index" class="btn btn-primary">Nova Página</a>
</div>
<div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="mb-0">Lista de Páginas</h1>
    <div class="d-flex align-items-center gap-2">
        <form method="get" asp-action="Listar">
            <select name="pageSize" class="form-select form-select-sm rounded" onchange="this.form.submit()" style="width: 70px;">
                @{ var sizes = new[] { 5, 10, 20, 50 };
                                foreach (var s in sizes)
                                {
                    <option value="@s" selected="@(s == pageSize)">@s</option> } }
            </select>
        </form>
    </div>
</div>

@foreach (var pagina in Model.Where(p => p.CdPai == null))
{
<div class="card mb-3 shadow-sm">
    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <div class="fw-bold">Página: @pagina.Titulo</div>
        <button class="btn btn-sm btn-light toggle-content" data-target="pagina-@pagina.Codigo">
            ▼ Expandir
        </button>
    </div>

    <div class="card-body" id="pagina-@pagina.Codigo" style="display:none;">
        <p class="mb-2">
            <strong>Resumo:</strong>
            @Snippet(pagina.Conteudo, 220)
        </p>
        <div class="d-flex flex-wrap">
            <a asp-action="Gerenciar" asp-route-id="@pagina.Codigo" class="btn btn-sm btn-warning">
                Editar
            </a>
            <a asp-action="Excluir" asp-route-id="@pagina.Codigo" class="btn btn-sm btn-danger mx-1">
                Excluir
            </a>
            <a asp-action="Exibir" asp-route-id="@pagina.Url" class="btn btn-sm btn-success">
                Exibir
            </a>
        </div>
    </div>
</div>}

@if (totalPages > 1)
{
<nav aria-label="Paginação">
    <ul class="pagination justify-content-center">
        <li class="page-item @(page <= 1 ? "disabled" : "")">
            <a class="page-link" href="@(page > 1 ? BuildPageUrl(page - 1) : "#")" tabindex="-1" aria-disabled="@(page <= 1)">
                « Anterior
            </a>
        </li>

        @for (int p = 1; p <= totalPages; p++)
        {
<li class="page-item @(p == page ? "active" : "")">
    <a class="page-link" href="@BuildPageUrl(p)">@p</a>
</li>
}

        <li class="page-item @(page >= totalPages ? "disabled" : "")">
            <a class="page-link" href="@(page < totalPages ? BuildPageUrl(page + 1) : "#")" aria-disabled="@(page >= totalPages)">
                Próxima »
            </a>
        </li>
    </ul>
</nav>}

@section Scripts {
    <script>
        document.querySelectorAll('.toggle-content').forEach(button => {
            button.addEventListener('click', function () {
                const targetId = this.getAttribute('data-target');
                const content = document.getElementById(targetId);
                const isExpanded = content.style.display === 'block';

                if (isExpanded) {
                    content.style.display = 'none';
                    this.textContent = '▼ Expandir';
                    this.classList.remove('btn-dark');
                    this.classList.add('btn-light');
                } else {
                    content.style.display = 'block';
                    this.textContent = '▲ Recolher';
                    this.classList.remove('btn-light');
                    this.classList.add('btn-dark');
                }
            });
        });
    </script>
}
