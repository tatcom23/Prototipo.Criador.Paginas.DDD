@using Paginas.Domain.Enums
@model Paginas.Application.DTOs.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard de Páginas";
}

<div class="container mt-4">
    <!-- 🔹 FILTRO DE PERÍODO -->
    <div class="p-4 mb-4 border rounded-3 shadow-sm bg-light">
        <form asp-action="Dashboard" asp-controller="Pagina" method="get"
              class="row g-4 align-items-end justify-content-between">
            <!-- Tipo de Período -->
            <div class="col-12 col-md-3">
                <label for="periodo" class="form-label fw-semibold text-secondary mb-2">
                    📅 Período do Relatório
                </label>
                <select id="periodo" name="periodo" class="form-select form-select-sm" onchange="toggleDatas()">
                    @foreach (var op in Enum.GetValues(typeof(Paginas.Domain.Enums.PeriodoRelatorio)).Cast<Paginas.Domain.Enums.PeriodoRelatorio>())
                    {
                        var texto = "";
                        switch (op)
                        {
                            case Paginas.Domain.Enums.PeriodoRelatorio.MesAtual:
                                texto = "Mês Atual";
                                break;
                            case Paginas.Domain.Enums.PeriodoRelatorio.UltimoMes:
                                texto = "Último Mês";
                                break;
                            case Paginas.Domain.Enums.PeriodoRelatorio.UltimoSemestre:
                                texto = "Último Semestre";
                                break;
                            case Paginas.Domain.Enums.PeriodoRelatorio.UltimoAno:
                                texto = "Último Ano";
                                break;
                            case Paginas.Domain.Enums.PeriodoRelatorio.Todos:
                                texto = "Todas";
                                break;
                            case Paginas.Domain.Enums.PeriodoRelatorio.Personalizado:
                                texto = "Personalizado";
                                break;
                        }

                        var isSelected = ViewBag.PeriodoSelecionado == op.ToString();

                        // ✅ O Razor só lê atributos fixos, então fazemos o if separado
                        if (isSelected)
                        {
                            <option value="@op.ToString()" selected>@texto</option>
                        }
                        else
                        {
                            <option value="@op.ToString()">@texto</option>
                        }
                    }
                </select>
            </div>
            <!-- Datas personalizadas (inicialmente ocultas) -->
            <div id="datasPersonalizadas" class="col-12 col-md-5 d-none">
                <div class="row g-3">
                    <div class="col-12 col-md-6">
                        <label for="dataInicio" class="form-label mb-2 text-secondary">De:</label>
                        <input type="date" id="dataInicio" name="dataInicio"
                               class="form-control form-control-sm shadow-sm" />
                    </div>
                    <div class="col-12 col-md-6">
                        <label for="dataFim" class="form-label mb-2 text-secondary">Até:</label>
                        <input type="date" id="dataFim" name="dataFim"
                               class="form-control form-control-sm shadow-sm" />
                    </div>
                </div>
            </div>
            <!-- Botão Aplicar -->
            <div class="col-12 col-md-2 d-flex justify-content-md-end">
                <button type="submit" class="btn btn-info btn-sm fw-semibold shadow-sm px-3 w-100 mt-2 mt-md-0">
                    📊 Aplicar Filtro
                </button>
            </div>
        </form>
    </div>

    @if (Model != null && (Model.TotalPaginasAtivas > 0 || Model.Tabela.Any() || Model.Grafico.Any()))
    {
        <h2 class="mb-4 text-center">📊 Dashboard de Páginas Introdutórias</h2>
        <!-- CARD TOTAL -->
        <div class="row mb-4">
            <div class="col-md-4 offset-md-4">
                <div class="card text-center shadow">
                    <div class="card-body">
                        <h5 class="card-title">Total de Páginas Ativas</h5>
                        <h2 class="text-primary">@Model.TotalPaginasAtivas</h2>
                    </div>
                </div>
            </div>
        </div>
        <!-- TABELA -->
        <div class="card shadow mb-4">
            <div class="card-body">
                <h5 class="card-title mb-3">📋 Páginas Ativas</h5>
                <table class="table table-striped table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Título</th>
                            <th>Data de Criação</th>
                            <th>Data de Atualização</th>
                            <th>Quantidade de Tópicos</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Tabela)
                        {
                            <tr>
                                <td>@item.Titulo</td>
                                <td>@item.Criacao.ToString("dd/MM/yyyy")</td>
                                <td>@item.Atualizacao?.ToString("dd/MM/yyyy")</td>
                                <td>@item.QuantidadeTopicos</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!-- GRÁFICO -->
        <div class="card shadow mb-4">
            <div class="card-body">
                <h5 class="card-title mb-3">📈 Páginas Criadas por Mês</h5>
                <canvas id="graficoPaginas"></canvas>
            </div>
        </div>
        <!-- FORM PARA GERAR PDF -->
        <form asp-action="DashboardPdf" method="post" id="pdfForm">
            <input type="hidden" name="graficoBase64" id="graficoBase64" />
            <button type="submit" class="btn btn-danger mb-3">
                📄 Exportar para PDF
            </button>
        </form>
        <!-- BOTÃO VOLTAR -->
        <a asp-action="Listar" asp-controller="Pagina" class="btn btn-secondary mb-3">
            ⬅️ Voltar para Lista
        </a>
    }

</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        function toggleDatas() {
            const select = document.getElementById("periodo");
            const datas = document.getElementById("datasPersonalizadas");
            const valor = select.value.toLowerCase(); // converte para minúsculas para evitar erro
            if (valor === "personalizado") {
                datas.classList.remove("d-none");
                datas.classList.add("fade-in");
            } else {
                datas.classList.add("d-none");
                datas.classList.remove("fade-in");
                document.getElementById("dataInicio").value = "";
                document.getElementById("dataFim").value = "";
            }
        }

        // ✅ Executa ao carregar a página (para manter estado após postback)
        document.addEventListener("DOMContentLoaded", function () {
            toggleDatas();
        });

        // Renderiza o gráfico somente se o modelo estiver preenchido
        @if (Model != null && Model.Grafico.Any())
        {
                    @:const ctx = document.getElementById('graficoPaginas').getContext('2d');
                    @:const labels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Grafico.Select(g => g.MesAno)));
                    @:const data = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Grafico.Select(g => g.Quantidade)));
                    @:const chart = new Chart(ctx, {
                    @:    type: 'bar',
                    @:    data: {
                    @:        labels: labels,
                    @:        datasets: [{
                    @:            label: 'Páginas Criadas',
                    @:            data: data,
                    @:            borderWidth: 1,
                    @:            backgroundColor: '#007bff'
                    @:        }]
                    @:    },
                    @:    options: {
                    @:        responsive: true,
                    @:        scales: {
                    @:            y: {
                    @:                beginAtZero: true,
                    @:                ticks: { precision: 0 }
                    @:            }
                    @:        }
                    @:    }
                    @:});
                    // Converter gráfico em Base64 antes de enviar
                    @:document.getElementById('pdfForm').addEventListener('submit', function (e) {
                    @:    const graficoImg = chart.toBase64Image();
                    @:    document.getElementById('graficoBase64').value = graficoImg;
                    @:});
        }
    </script>
}
<style>
    /* Suaviza a transição de exibição */
    .fade-in {
        animation: fadeIn 0.4s ease-in-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-5px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    /* Melhora o espaçamento interno e o equilíbrio visual */
    .form-label {
        font-size: 0.9rem;
    }

    .form-select-sm, .form-control-sm {
        height: 36px;
    }

    .p-4 {
        padding: 1.75rem !important;
    }
</style>